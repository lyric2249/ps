# 중복 제거용 앵커
x-airflow-image: &airflow_image apache/airflow:3.0.2-python3.11

x-airflow-vols: &airflow_vols
  - ./airflow/dags:/opt/airflow/dags:ro
  - ./airflow/plugins:/opt/airflow/plugins:ro
  - ./airflow/airflow_logs:/opt/airflow/logs

# Airflow 공통 환경변수 (DB URI는 .env에서 AIRFLOW_DB_URI로 넘김 권장)
x-airflow-common: &airflow_common
  image: *airflow_image
  environment:
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_URI:-postgresql+psycopg2://airflow:airflow_pw@postgres-meta:5432/airflow}
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Asia/Seoul
    AIRFLOW_UID: "1000"
  user: "50000:0"
  networks: [edge]
  restart: unless-stopped

# Postgres 공통
x-pg-env: &pg_env
  image: postgres:17
  restart: unless-stopped
  networks: [edge]
  healthcheck:
    test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
    interval: 5s
    timeout: 5s
    retries: 20


# 서브도메인 정의
x-superset-baseurl: &superset_baseurl "https://airflow.${PUBLIC_HOST}/"
x-airflow-baseurl: &airflow_baseurl "https://airflow.${PUBLIC_HOST}/"


services:

  # =========================
  # Postgres
  # =========================
  postgres-meta:
    <<: *pg_env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - meta_pg:/var/lib/postgresql/data
    ports: ["127.0.0.1:5432:5432"]   # 로컬 전용

  postgres-data:
    <<: *pg_env
    environment:
      POSTGRES_USER: data_admin
      POSTGRES_PASSWORD: data_pw
      POSTGRES_DB: analytics
    volumes:
      - data_pg:/var/lib/postgresql/data
    ports: ["127.0.0.1:5434:5432"]   # 로컬 전용


  # =========================
  # Redis
  # =========================
  redis:
    image: redis:7
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    networks: [edge]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  # =========================
  # Superset
  # =========================
  superset:
    image: ghcr.io/lyric2249/superset-custom:latest
    env_file: .env
    environment:
      PUBLIC_HOST: ${PUBLIC_HOST}
      PYTHONPATH: /app/pythonpath:/app
      SUPERSET_WEBSERVER_BASEURL: *superset_baseurl
      # (선택) Redis 캐시/큐 사용 시 superset_config.py에서 연결
      # e.g. redis://redis:6379/1
    expose: ["8088"]
    volumes:
      - superset_home:/app/superset_home
      - ./superset/superset_config.py:/app/pythonpath/superset_config.py:ro
      - ./superset/boot.sh:/docker-entrypoint-initdb.d/10_boot.sh:ro
    depends_on:
      postgres-meta:
        condition: service_healthy
      redis:
        condition: service_started
    user: "1000:1000"
    restart: unless-stopped
    networks: [edge]

  # =========================
  # Airflow (기본: LocalExecutor)
  # =========================
  airflow-init:
    <<: *airflow_common
    depends_on:
      postgres-meta:
        condition: service_healthy
    env_file: [.env]
    environment:
      <<: *{ }  # no-op to keep YAML merge clear
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__WEBSERVER__BASE_URL: *airflow_baseurl
    user: "50000:0"
    volumes:
      - ./airflow/boot.sh:/opt/boot.sh:ro
    entrypoint: ["/bin/bash","-lc"]
    command: ["/opt/boot.sh"]

  airflow-api-server:
    <<: *airflow_common
    depends_on:
      postgres-meta:
        condition: service_healthy
      airflow-scheduler:
        condition: service_started
    command: ["airflow", "api-server"]
    environment:
      AIRFLOW__WEBSERVER__BASE_URL: *airflow_baseurl
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    expose: ["8080"]
    volumes: *airflow_vols

  airflow-scheduler:
    <<: *airflow_common
    depends_on:
      postgres-meta:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    command: scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    volumes: *airflow_vols

  airflow-dag-processor:
    <<: *airflow_common
    depends_on:
      postgres-meta:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    command: ["airflow","dag-processor"]
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    volumes: *airflow_vols


#  # =========================
#  # (선택) Airflow CeleryExecutor 프로필
#  # =========================
#  airflow-triggerer:
#    <<: *airflow_common
#    profiles: ["celery"]
#    depends_on:
#      postgres-meta:
#        condition: service_healthy
#      airflow-init:
#        condition: service_completed_successfully
#      redis:
#        condition: service_started
#    command: triggerer
#    environment:
#      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
#      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
#      AIRFLOW__CELERY__RESULT_BACKEND: db+${AIRFLOW_DB_URI:-postgresql+psycopg2://airflow:airflow_pw@postgres-meta:5432/airflow}
#    volumes: *airflow_vols
#
#  airflow-worker:
#    <<: *airflow_common
#    profiles: ["celery"]
#    depends_on:
#      postgres-meta:
#        condition: service_healthy
#      airflow-init:
#        condition: service_completed_successfully
#      redis:
#        condition: service_started
#    command: celery worker
#    environment:
#      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
#      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
#      AIRFLOW__CELERY__RESULT_BACKEND: db+${AIRFLOW_DB_URI:-postgresql+psycopg2://airflow:airflow_pw@postgres-meta:5432/airflow}
#    volumes: *airflow_vols

  # =========================
  # Cloudflare Tunnel
  # =========================
  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run --token ${CF_TUNNEL_TOKEN}
    restart: unless-stopped
    networks: [edge]

networks:
  edge:
    driver: bridge

volumes:
  superset_home:
  meta_pg:
  data_pg:
